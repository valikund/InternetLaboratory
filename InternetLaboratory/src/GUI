import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.*;

public class GUI extends JFrame{
	
		
		
		public JButton btnLoad = new JButton("Load"); 
		public JButton btnSave = new JButton("Save"); 
		public JButton btnRun = new JButton("Run"); 
		
		public JRadioButton radText1 = new JRadioButton("Mosaic Mode");
		public JRadioButton radText2 = new JRadioButton("TextArt");
		public JRadioButton radText3 = new JRadioButton("GlitchArt");
		
		public ImageIcon currImg = new ImageIcon("beautiful indian.jpg");
		//public BufferedImage buffImg = new BufferedImage();
		
		
		//Mosaic Components
		public JTextField searchText = new JTextField("Preferred Topic");
		public JButton searchBtn = new JButton("Search");
		

		//JLabel imgLab = new JLabel(currImg);
		
		
		
		public static void main(String[] args) {
			
			GUI frame = new GUI();
			frame.setTitle("Image Processing");
			
			Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
						
			frame.setSize((int)(screenSize.getWidth()-100), (int)(screenSize.getHeight()-100)); //felbontást figyelembe véve állítja be az ablak méretét
			frame.setLocationRelativeTo(null);
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			frame.setVisible(true);
			
			//frame.revalidate();

		}
		
		public GUI(){
			
			setLayout(new FlowLayout(FlowLayout.LEFT,10,20)); //finomítani
			
			JTabbedPane tabs = new JTabbedPane();
			
			JPanel textRadioPan = new JPanel();
			textRadioPan.setLayout(new GridLayout(3,1));
			ButtonGroup textMethodRadioGroup = new ButtonGroup();
			textMethodRadioGroup.add(radText1);
			textMethodRadioGroup.add(radText2);
			textMethodRadioGroup.add(radText3);
			textRadioPan.add(radText1);
			textRadioPan.add(radText2);
			textRadioPan.add(radText3);
			
			
			JLabel imgLab = new JLabel(currImg);
			imgLab.setPreferredSize(new Dimension(Toolkit.getDefaultToolkit().getScreenSize().height,Toolkit.getDefaultToolkit().getScreenSize().width/2));
			//JPanel imgPan = new JPanel(imgLab);
			JPanel generalPan = new JPanel();
			JPanel mosaicPan = new JPanel();
			JPanel textPan = new JPanel();
			JPanel glitchPan = new JPanel();
			JPanel controlPan = new JPanel();
			controlPan.setLayout(new BorderLayout(5, 10));
			setLayout(new GridLayout(1,2));
			generalPan.add(btnLoad);
			generalPan.add(btnSave);
			generalPan.add(btnRun);
			
			mosaicPan.add(searchText);
			mosaicPan.add(searchBtn);
			
			textPan.add(textRadioPan);
			
			
			tabs.setPreferredSize( new Dimension( 640, 480 ) );
			tabs.addTab("Mosaic", mosaicPan);
			tabs.addTab("TextArt", textPan);
			tabs.addTab("GlitchArt", glitchPan);
			
			
			add(imgLab);
			controlPan.add("North",tabs);
			controlPan.add("South",generalPan);
			add(controlPan);
			//LoadListenerClass load = new LoadListenerClass();
			
			
			btnLoad.addActionListener(new ActionListener(){
				@Override
				public void actionPerformed(ActionEvent e){
					
					JFrame fileDialog = new JFrame();
					
					FileDialog fd = new FileDialog(fileDialog, "Choose a file", FileDialog.LOAD);
					fd.setDirectory("C:\\");   //esetleg aktuál mappához megoldandó
					fd.setFile("*.jpg");  //több filetípushoz megoldani (+gif és png)
					fd.setVisible(true);
					//String filename = fd.getFile();
					String filename = (fd.getDirectory()+fd.getFile());
					System.out.println(filename);
					
					if (filename == null){
													//hibakezelés helye
					}
					else{
						BufferedImage img = null;										//nem kerülhető ez ki?
						try {
							img = ImageIO.read(new File(filename));
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						
						
						//img = Resize(img); 								//Resize nem megy imageIcon-nal?
						currImg.setImage(img);
						
						
						imgLab.setIcon(currImg);
						imgLab.repaint();
						//imgLab.setIcon((Icon) img);
						//currImg.setImage(img);
					}
				}
			});
				
			btnSave.addActionListener(new ActionListener(){
				@Override
				public void actionPerformed(ActionEvent e){
					
					JFrame fileDialog = new JFrame();
					
					FileDialog fd = new FileDialog(fileDialog, "Choose a file", FileDialog.SAVE);
					fd.setDirectory("C:\\");   //esetleg aktuál mappához megoldandó
					fd.setFile("*.jpg");  //több filetípushoz megoldani (+gif és png)
					fd.setVisible(true);
					//String filename = fd.getFile();
					String filename = (fd.getDirectory() + fd.getFile() + ".jpg");
					System.out.println(filename);
					
					if (filename == null){
													//hibakezelés helye
					}
					else{
						BufferedImage img = new BufferedImage(
							    currImg.getIconWidth(),
							    currImg.getIconHeight(),
							    BufferedImage.TYPE_INT_RGB);
						
						try {
							ImageIO.write(img,"jpg", new File(filename));
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
				}
			});
			
			btnRun.addActionListener(new ActionListener(){				//ide tápláljuk, run megnyomásakor mi történjen
				@Override
				public void actionPerformed(ActionEvent e){
					if(tabs.getSelectedIndex() == 0){					//Mosaic
						
					}
					
						if(tabs.getSelectedIndex() == 1){				//Text
						
					}
						
						if(tabs.getSelectedIndex() == 2){				//Glitch
							
					}
				}
			
			});
			
			
			
			}
		
		
}






